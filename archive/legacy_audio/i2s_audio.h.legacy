#include <driver/i2s.h>

// Assumes these exist in your project config:
//   - CONFIG.SAMPLE_RATE            (e.g., 16000)
//   - CONFIG.SAMPLES_PER_CHUNK      (e.g., 128)
//   - I2S_PORT                      (e.g., I2S_NUM_0)
//   - I2S_BCLK_PIN = 7
//   - I2S_LRCLK_PIN = 13
//   - I2S_DIN_PIN  = 8
//
// Assumes SPH0645 SEL tied to GND (LEFT channel).
// Format: Standard I2S, 32-bit slots, RX-only.
// DMA ring: 8 buffers, each 2Ã— frame size.

const i2s_config_t i2s_config = {
  .mode = static_cast<i2s_mode_t>(I2S_MODE_MASTER | I2S_MODE_RX),
  .sample_rate = CONFIG.SAMPLE_RATE,
  .bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT,
  .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
  .communication_format = I2S_COMM_FORMAT_STAND_I2S,
  .intr_alloc_flags = 0,
  .dma_buf_count = 8,
  .dma_buf_len = CONFIG.SAMPLES_PER_CHUNK * 2,
  .use_apll = false,
  .tx_desc_auto_clear = false,
  .fixed_mclk = 0,
  .mclk_multiple = I2S_MCLK_MULTIPLE_256,
  .bits_per_chan = I2S_BITS_PER_CHAN_32BIT
};

const i2s_pin_config_t pin_config = {
  .bck_io_num   = I2S_BCLK_PIN,
  .ws_io_num    = I2S_LRCLK_PIN,
  .data_out_num = I2S_PIN_NO_CHANGE,
  .data_in_num  = I2S_DIN_PIN
};

void init_i2s() {
  i2s_driver_install(I2S_PORT, &i2s_config, 0, nullptr);
  i2s_set_pin(I2S_PORT, &pin_config);
  i2s_set_clk(I2S_PORT, CONFIG.SAMPLE_RATE, I2S_BITS_PER_SAMPLE_32BIT, I2S_CHANNEL_MONO);
  i2s_zero_dma_buffer(I2S_PORT);
  i2s_start(I2S_PORT);
}

