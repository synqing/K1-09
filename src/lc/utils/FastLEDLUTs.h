#pragma once
#include <Arduino.h>
#include <FastLED.h>

// Pre-calculated lookup tables for maximum performance
// All tables stored in PROGMEM to save RAM

namespace FastLEDLUTs {

// Sine lookup table (0-255 mapped to 0-255 output)
// Saves ~10-20 cycles per lookup vs sin8()
const uint8_t PROGMEM sin_lut[256] = {
    128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 162, 165, 167, 170, 173,
    176, 179, 182, 185, 188, 190, 193, 196, 198, 201, 203, 206, 208, 211, 213, 215,
    218, 220, 222, 224, 226, 228, 230, 232, 234, 235, 237, 239, 240, 241, 243, 244,
    245, 246, 248, 249, 250, 250, 251, 252, 253, 253, 254, 254, 254, 255, 255, 255,
    255, 255, 255, 255, 254, 254, 254, 253, 253, 252, 251, 250, 250, 249, 248, 246,
    245, 244, 243, 241, 240, 239, 237, 235, 234, 232, 230, 228, 226, 224, 222, 220,
    218, 215, 213, 211, 208, 206, 203, 201, 198, 196, 193, 190, 188, 185, 182, 179,
    176, 173, 170, 167, 165, 162, 158, 155, 152, 149, 146, 143, 140, 137, 134, 131,
    128, 124, 121, 118, 115, 112, 109, 106, 103, 100, 97, 93, 90, 88, 85, 82,
    79, 76, 73, 70, 67, 65, 62, 59, 57, 54, 52, 49, 47, 44, 42, 40,
    37, 35, 33, 31, 29, 27, 25, 23, 21, 20, 18, 16, 15, 14, 12, 11,
    10, 9, 7, 6, 5, 5, 4, 3, 2, 2, 1, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 9,
    10, 11, 12, 14, 15, 16, 18, 20, 21, 23, 25, 27, 29, 31, 33, 35,
    37, 40, 42, 44, 47, 49, 52, 54, 57, 59, 62, 65, 67, 70, 73, 76,
    79, 82, 85, 88, 90, 93, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124
};

// Cosine lookup table (phase shifted sine)
inline uint8_t cos_lut(uint8_t angle) {
    return pgm_read_byte(&sin_lut[(uint8_t)(angle + 64)]);
}

// Triangle wave lookup table
const uint8_t PROGMEM tri_lut[256] = {
    0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
    32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,
    64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
    96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,
    128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158,
    160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190,
    192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222,
    224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254,
    255, 254, 252, 250, 248, 246, 244, 242, 240, 238, 236, 234, 232, 230, 228, 226,
    224, 222, 220, 218, 216, 214, 212, 210, 208, 206, 204, 202, 200, 198, 196, 194,
    192, 190, 188, 186, 184, 182, 180, 178, 176, 174, 172, 170, 168, 166, 164, 162,
    160, 158, 156, 154, 152, 150, 148, 146, 144, 142, 140, 138, 136, 134, 132, 130,
    128, 126, 124, 122, 120, 118, 116, 114, 112, 110, 108, 106, 104, 102, 100, 98,
    96, 94, 92, 90, 88, 86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66,
    64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34,
    32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2
};

// Gaussian/bell curve for smooth falloffs
const uint8_t PROGMEM gaussian_lut[128] = {
    255, 254, 253, 251, 248, 245, 241, 237, 232, 227, 221, 215, 209, 202, 195, 188,
    181, 173, 165, 157, 149, 141, 133, 125, 117, 109, 101, 94, 86, 79, 72, 65,
    59, 53, 47, 42, 37, 32, 28, 24, 21, 18, 15, 13, 11, 9, 7, 6,
    5, 4, 3, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

// Pre-calculated angles for 9x9 matrix (0-255 range)
// Arranged in spiral pattern from center
const uint8_t PROGMEM matrix_angles_lut[81] = {
    // Row 0
    225, 241, 0, 14, 28, 42, 56, 70, 85,
    // Row 1  
    210, 224, 240, 0, 16, 32, 48, 64, 96,
    // Row 2
    195, 208, 224, 240, 0, 16, 32, 48, 112,
    // Row 3
    180, 192, 208, 224, 240, 0, 16, 32, 128,
    // Row 4
    165, 176, 192, 208, 128, 16, 32, 48, 143,
    // Row 5
    150, 160, 176, 192, 208, 224, 240, 0, 159,
    // Row 6
    135, 144, 160, 176, 192, 208, 224, 240, 175,
    // Row 7
    120, 128, 144, 160, 176, 192, 208, 224, 191,
    // Row 8
    105, 112, 128, 144, 160, 176, 192, 208, 207
};

// Pre-calculated distances from center for 9x9 matrix
const uint8_t PROGMEM matrix_radii_lut[81] = {
    // Distances scaled to 0-255 range
    180, 160, 141, 127, 120, 127, 141, 160, 180,
    160, 127, 100, 80, 71, 80, 100, 127, 160,
    141, 100, 71, 45, 32, 45, 71, 100, 141,
    127, 80, 45, 22, 0, 22, 45, 80, 127,
    120, 71, 32, 0, 0, 0, 32, 71, 120,
    127, 80, 45, 22, 0, 22, 45, 80, 127,
    141, 100, 71, 45, 32, 45, 71, 100, 141,
    160, 127, 100, 80, 71, 80, 100, 127, 160,
    180, 160, 141, 127, 120, 127, 141, 160, 180
};

// Exponential curve for brightness scaling
const uint8_t PROGMEM exp_lut[256] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4,
    4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7,
    7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12,
    13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20, 20,
    21, 22, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
    35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 51, 53, 54, 56,
    58, 60, 62, 64, 66, 68, 70, 73, 75, 77, 80, 82, 85, 88, 91, 93,
    96, 99, 103, 106, 109, 113, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153,
    158, 163, 168, 173, 178, 184, 189, 195, 201, 207, 213, 219, 226, 232, 239, 246,
    253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
};

// Fast inline functions using LUTs
inline uint8_t sin_lut_read(uint8_t angle) {
    return pgm_read_byte(&sin_lut[angle]);
}

inline uint8_t tri_lut_read(uint8_t angle) {
    return pgm_read_byte(&tri_lut[angle]);
}

inline uint8_t gaussian_lut_read(uint8_t distance) {
    if (distance >= 128) return 0;
    return pgm_read_byte(&gaussian_lut[distance]);
}

inline uint8_t exp_lut_read(uint8_t value) {
    return pgm_read_byte(&exp_lut[value]);
}

inline uint8_t get_matrix_angle(uint8_t index) {
    if (index >= 81) return 0;
    return pgm_read_byte(&matrix_angles_lut[index]);
}

inline uint8_t get_matrix_radius(uint8_t index) {
    if (index >= 81) return 0;
    return pgm_read_byte(&matrix_radii_lut[index]);
}

} // namespace FastLEDLUTs