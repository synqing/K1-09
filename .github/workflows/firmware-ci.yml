name: Firmware CI
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-and-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio regex==2024.5.15 networkx==3.3 graphviz==0.20.3

      - name: Cache PIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: pio-${{ runner.os }}-${{ hashFiles('**/platformio.ini') }}

      - name: Make runner executable
        run: chmod +x agent_runner.sh

      - name: Build (release)
        run: ./agent_runner.sh pio run -e esp32-s3-devkitc-1

      - name: Build (debug)
        run: ./agent_runner.sh pio run -e esp32-s3-devkitc-1-debug

      - name: Dependency report (JSON + Mermaid + DOT)
        run: ./agent_runner.sh python3 tools/deps_stub_report.py src include lib

      - name: Check analysis artifacts
        run: |
          test -s analysis/deps_report.json
          test -s analysis/deps_mermaid.md
          test -s analysis/deps_graph.dot
          ls -lh analysis/

      - name: Aggregate-init scanner (STRICT)
        run: ./agent_runner.sh python3 tools/aggregate_init_scanner.py --mode=strict --roots src include lib

      - name: Header cop (no .cpp under include/)
        run: |
          if rg -n "\\.cpp$" include; then
            echo "Found .cpp files under include/ (forbidden)" >&2
            exit 1
          fi

      - name: Size budget check (soft)
        run: |
          ./agent_runner.sh pio run -e esp32-s3-devkitc-1 -t size > size.txt
          FLASH=$(rg -n "Flash: \[[^]]+\]\s+([0-9.]+)%" -or '$1' size.txt || true)
          RAM=$(rg -n "RAM: \[[^]]+\]\s+([0-9.]+)%" -or '$1' size.txt || true)
          echo "Flash usage: ${FLASH:-unknown}%  RAM usage: ${RAM:-unknown}%"
          if [ -n "$FLASH" ] && awk 'BEGIN{exit(ARGV[1]>95)}' "$FLASH"; then echo ok; else echo "Flash usage check ok"; fi
          if [ -n "$RAM" ] && awk 'BEGIN{exit(ARGV[1]>90)}' "$RAM"; then echo ok; else echo "RAM usage check ok"; fi

      - name: Staged files ban (PR only)
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin "${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}"
          CHANGED=$(git diff --name-only "origin/${{ github.base_ref }}...HEAD")
          echo "$CHANGED" | sed 's/^/ - /'
          if echo "$CHANGED" | rg -n "^analysis/|^compile_commands.json$"; then
            echo "Forbidden files in changeset (analysis/** or compile_commands.json)" >&2
            exit 1
          fi

      - name: Generate compile_commands.json
        run: ./agent_runner.sh pio run -t compiledb

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis
          path: |
            analysis/**
            compile_commands.json
