name: Firmware CI
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-and-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio regex==2024.5.15 networkx==3.3 graphviz==0.20.3

      - name: Cache PIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: pio-${{ runner.os }}-${{ hashFiles('**/platformio.ini') }}

      - name: Make runner executable
        run: chmod +x agent_runner.sh

      - name: Install clang tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format-15 clang-tidy-15
          sudo ln -sf /usr/bin/clang-format-15 /usr/bin/clang-format
          sudo ln -sf /usr/bin/clang-tidy-15 /usr/bin/clang-tidy

      - name: Build (release)
        run: ./agent_runner.sh pio run -e esp32-s3-devkitc-1

      - name: Build (debug)
        run: ./agent_runner.sh pio run -e esp32-s3-devkitc-1-debug

      - name: Dependency report (JSON + Mermaid + DOT)
        run: ./agent_runner.sh python3 tools/deps_stub_report.py src include lib

      - name: Check analysis artifacts
        run: |
          test -s analysis/deps_report.json
          test -s analysis/deps_mermaid.md
          test -s analysis/deps_graph.dot
          ls -lh analysis/

      - name: Aggregate-init scanner (STRICT)
        run: ./agent_runner.sh python3 tools/aggregate_init_scanner.py --mode=strict --roots src include lib

      - name: Header cop (no .cpp under include/)
        run: |
          if rg -n "\\.cpp$" include; then
            echo "Found .cpp files under include/ (forbidden)" >&2
            exit 1
          fi

      - name: Size budget check (soft)
        run: |
          ./agent_runner.sh pio run -e esp32-s3-devkitc-1 -t size > size.txt
          FLASH=$(rg -n "Flash: \[[^]]+\]\s+([0-9.]+)%" -or '$1' size.txt || true)
          RAM=$(rg -n "RAM: \[[^]]+\]\s+([0-9.]+)%" -or '$1' size.txt || true)
          echo "Flash usage: ${FLASH:-unknown}%  RAM usage: ${RAM:-unknown}%"
          if [ -n "$FLASH" ] && awk 'BEGIN{exit(ARGV[1]>95)}' "$FLASH"; then echo ok; else echo "Flash usage check ok"; fi
          if [ -n "$RAM" ] && awk 'BEGIN{exit(ARGV[1]>90)}' "$RAM"; then echo ok; else echo "RAM usage check ok"; fi

      - name: Staged files ban (PR only)
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin "${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}"
          CHANGED=$(git diff --name-only "origin/${{ github.base_ref }}...HEAD")
          echo "$CHANGED" | sed 's/^/ - /'
          if echo "$CHANGED" | rg -n "^analysis/|^compile_commands.json$"; then
            echo "Forbidden files in changeset (analysis/** or compile_commands.json)" >&2
            exit 1
          fi

      - name: PR guardrails (labels, freeze, dynamic alloc)
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PRNUM: ${{ github.event.pull_request.number }}
          BASE: ${{ github.base_ref }}
        run: |
          set -euo pipefail
          # Fetch PR JSON
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$PRNUM" > pr.json
          LABELS=$(jq -r '.labels[].name' pr.json | tr '\n' ' ')
          echo "Labels: $LABELS"
          case " $LABELS " in
            *" color-refit "*) : ;; 
            *) echo "Missing required label: color-refit" >&2; exit 1;;
          esac

          # Phase label detection
          PHASE=""
          for p in phase-0 phase-1 phase-2 phase-3 phase-4; do
            if echo " $LABELS " | grep -q " $p "; then PHASE=$p; break; fi
          done
          if [ -z "$PHASE" ]; then
            echo "Missing phase label (phase-0..phase-4)" >&2; exit 1
          fi

          # Require artefacts exist for the phase (at least one non-.gitkeep file)
          folder="docs/retrofit_artifacts/${PHASE#phase-}"
          if [ ! -d "$folder" ]; then
            echo "Missing artefact folder: $folder" >&2; exit 1
          fi
          if ! find "$folder" -maxdepth 1 -type f ! -name .gitkeep | grep -q .; then
            echo "No artefacts found in $folder (expect build logs / captures)" >&2; exit 1
          fi

          # Freeze: disallow router/IÂ²S changes unless override labels present
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$PRNUM/files?per_page=200" > files.json
          ROUTER_TOUCH=$(jq -r '.[].filename' files.json | rg -n "^src/(dual_coordinator|dual_router)\\." | wc -l | tr -d ' ')
          AUDIO_TOUCH=$(jq -r '.[].filename' files.json | rg -n "^src/(i2s_audio\\.h|core/i2s_audio_impl\\.cpp)$" | wc -l | tr -d ' ')
          if [ "$ROUTER_TOUCH" != "0" ] && ! echo " $LABELS " | grep -q " allow-router-touch "; then
            echo "Router/coordinator files modified without 'allow-router-touch' label" >&2; exit 1
          fi
          if [ "$AUDIO_TOUCH" != "0" ] && ! echo " $LABELS " | grep -q " allow-audio-touch "; then
            echo "I2S/audio files modified without 'allow-audio-touch' label" >&2; exit 1
          fi

          phase_allow() {
            local file="$1"
            case "$file" in
              docs/*|.github/*|scripts/*|tools/*|analysis/*|README.md|.scannerignore|agent_runner.sh|.clang-format|.clang-tidy|docs/palette_snapshots/*|docs/retrofit_artifacts/*|docs/COLOR_REFIT_GIT_WORKFLOW.md)
                return 0;;
            esac
            case "$PHASE" in
              phase-0)
                return 1;;
              phase-1)
                case "$file" in
                  src/user_config.h|src/led_utilities.h|src/palettes/palettes_bridge.h)
                    return 0;;
                esac
                return 1;;
              phase-2)
                case "$file" in
                  src/user_config.h|src/led_utilities.h|src/palettes/palettes_bridge.h|src/palettes/palette_facade.h|src/lightshow_modes.h|src/lightshow_modes.cpp)
                    return 0;;
                esac
                return 1;;
              phase-3)
                case "$file" in
                  src/led_utilities.h|src/palettes/palettes_bridge.h|src/led_color_debug.h|src/led_color_debug.cpp|src/core/globals.cpp)
                    return 0;;
                esac
                return 1;;
              phase-4)
                case "$file" in
                  src/lightshow_modes.h|src/lightshow_modes.cpp|src/palettes/palette_facade.h|src/palettes/palettes_bridge.h|src/led_utilities.h)
                    return 0;;
                esac
                return 1;;
            esac
          }

          disallowed=""
          while read -r fname; do
            phase_allow "$fname" || disallowed="$disallowed\n$fname"
          done < <(jq -r '.[].filename' files.json)

          if [ -n "$disallowed" ] && ! echo " $LABELS " | grep -q " phase-override "; then
            echo "Files outside phase scope:" >&2
            echo "$disallowed" >&2
            echo "Add label 'phase-override' or adjust file list." >&2
            exit 1
          fi

          # Dynamic allocation ban in diff (new code only)
          git fetch origin "$BASE:refs/remotes/origin/$BASE"
          git diff -U0 "origin/$BASE...HEAD" | rg -n "^\+.*\bnew\b|^\+.*delete\s*\[|^\+.*\bdelete\b" && {
            echo "New dynamic allocation detected in diff; disallowed in hot path." >&2; exit 1; } || true

      - name: Generate compile_commands.json
        run: ./agent_runner.sh pio run -t compiledb

      - name: clang-format check
        run: |
          find src include -type f \( -name '*.cpp' -o -name '*.hpp' -o -name '*.h' \) -print0 \
            | xargs -0 clang-format --dry-run --Werror

      - name: clang-tidy check
        run: |
          find src -type f -name '*.cpp' > cpp_files.txt
          if [ -s cpp_files.txt ]; then
            clang-tidy --warnings-as-errors='*' --quiet -p . $(cat cpp_files.txt)
          else
            echo "No C++ translation units to tidy"
          fi

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis
          path: |
            analysis/**
            compile_commands.json
